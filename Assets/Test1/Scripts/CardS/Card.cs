using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using DG.Tweening;
using UnityEngine.UIElements;
using UnityEngine.U2D;
using System.Linq;
using Newtonsoft.Json.Bson;
using UnityEngine.Events;
using System;
using TMPro;

using UnityEngine.Pool;


// Card에 들어갈 스크립트
public class Card : CardComponent
{
    private IObjectPool<Card> ManagedPool;

    // |------------------------------

    private Transform cardPrefabs;

    [SerializeField] SpriteRenderer card; // 앞면
    [SerializeField] SpriteRenderer cardBack; // 뒷면은 통일

    [SerializeField] Sprite cardback; // 뒷면 이미지
    [SerializeField] Sprite cardFront;

    [SerializeField] SpriteRenderer spriteCards;
    [SerializeField] SpriteRenderer spriteCards2;

    [SerializeField] BoxCollider2D Collider2D;

    //public string spriteSheetName;
    public string spriteNameToLoad;

    public PRS originPRS; // 카드 원본위치를 담은 PRS 클래스

    // 모든 텍스쳐를 다 넣어둘 배열
    //[SerializeField] Sprite[] sprites;

    //[SerializeField] string spriteSheetName;

    // SetUp 함수로 뽑은 카드의 구조체 정보를 받아와서 저장
    public ItemData itemdata;

    public int ID => itemdata.id; // 고유 번호로 쓰기 쉽게 속성 제공

    // 카드가 눌렸는지 확인
    [SerializeField] public bool checkCard = false;

    // |-----------------------------------------------

    public bool isInUse = false;



    [SerializeField] CardPopup cardPopup;

    private void Awake()
    {
        Collider2D = GetComponent<BoxCollider2D>();

        cardPrefabs = GetComponent<Transform>();

    }

    private void Start()
    {
        Collider2D.enabled = true;

        cardPopup.gameObject.SetActive(false);

        PopupText();
    }

    public void PopupText()
    {
        cardPopup.Initialize(itemdata.name, itemdata.id);
    }

    private void OnMouseEnter()
    {
        SoundManager.Instance.PlayCardEnter();
        cardPopup.MouseEnter();
    }

    private void OnMouseExit()
    {
        cardPopup.MouseExit();
    }
    public void Setup(ItemData item)
    {
        this.itemdata = item;

        // 스프라이트 이름 가져오기
        string spriteName = item.front;

        // 카드 앞면을 렌더링할 SpriteRenderer
        spriteCards = transform.GetChild(0).GetComponent<SpriteRenderer>();

        // CardSprites에서 스프라이트 꺼내오기
        Sprite selectedSprite = CardSprites.Instance.Get(spriteName);

        if (selectedSprite != null)
        {
            spriteCards.sprite = selectedSprite;
        }
        else
        {
            Debug.LogWarning($"[Card] 스프라이트 '{spriteName}'을(를) 찾을 수 없습니다.");
        }

        // 카드 뒷면 설정 (옵션)
        if (cardback != null)
        {
            spriteCards2 = transform.GetChild(1).GetComponent<SpriteRenderer>();
            cardBack.sprite = cardback;
        }

    }

    public Vector3 basePosition { get; private set; }
    public Vector3 baseScale { get; private set; }

    public void SaveInitialTransform()
    {
        basePosition = transform.position;
        baseScale = transform.localScale;
    }


    // 카드 정렬 애니메이션
    public void MoveTransform(PRS prs, bool useAnimation, float duration, System.Action onComplete = null)
    {
        if (useAnimation)
        {
            if (TryGetComponent<Collider2D>(out var collider))
                collider.enabled = false; // 클릭 충돌 자체 차단

            Sequence seq = DOTween.Sequence();
            seq.Append(transform.DOMove(prs.pos, duration).SetEase(Ease.OutCubic));
            seq.Join(transform.DORotateQuaternion(prs.rot, duration).SetEase(Ease.OutCubic));
            seq.Join(transform.DOScale(prs.scale, duration).SetEase(Ease.OutCubic));

            seq.OnComplete(() =>
            {
                if (collider != null)
                    collider.enabled = true; // 애니메이션 끝난 뒤 클릭 가능하게
                onComplete?.Invoke();
            });
        }
        else
        {
            transform.position = prs.pos;
            transform.rotation = prs.rot;
            transform.localScale = prs.scale;
            onComplete?.Invoke();
        }
    }



    // |--------------------------------------------------------------


    // 마우스로 클릭하면 CardIDdata 리스트에 카드 넣기 (최대5개)
    public void OnMouseDown()
    {
        SoundManager.Instance.PlayCardClick();
        OnCardClicked();
    }

    public override void OnCardClicked()
    {
        // 리스트  덜 찼다면
        if (checkCard && PokerManager.Instance.cardData.SelectCards.Count <= 5)
        {
            // 이 스크립트가 달린 Card를 매개변수로 전달
            //PokerManager.Instance.RemoveSuitIDdata(this);
            PokerManager.Instance.DeselectCard(this);

            AnimationManager.Instance.CardAnime(cardPrefabs);

            checkCard = false;
        }
        // 리스트가 덜 찼다면
        else if (PokerManager.Instance.cardData.SelectCards.Count < 5)
        {
            //PokerManager.Instance.SaveSuitIDdata(this);

            PokerManager.Instance.SelectCard(this);

            AnimationManager.Instance.ReCardAnime(cardPrefabs);

            checkCard = true;
        }
        else
        {
            AnimationManager.Instance.NoCardAnime(cardPrefabs);
        }
    }

    // |--------------------------------------------------------------

    // 배치된 카드 콜라이더 활성화
    public override void OnCollider()
    {
        Collider2D.enabled = true;
    }

    // 배치된 카드 콜라이더 비활성화
    public override void OffCollider()
    {

        Collider2D.enabled = false;

    }


    // |-----------------------------

    // 매개변수로 받은 Card 타입의 pool을 저장
    public void SetManagedPool(IObjectPool<Card> pool)
    {
        ManagedPool = pool;
    }


}